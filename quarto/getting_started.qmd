---
title: "Getting Started"
toc: true
toc-depth: 4
---

### Environment Setup and Package Installation

#### Environment Setup

Please ensure that R version 3.6 or higher is installed on your computer. This is required to install the `falcon` package and its dependencies. You can check your current version of R by running `sessionInfo()` within the R console.

#### Installing Packages Dependencies

The `falcon` package requires use of the `dplyr` package as well as several packages available from the Insights Engineering organization on GitHub.

To use the `falcon` package, ensure you have the necessary package dependencies installed by running the following code:

```{r, echo=TRUE, eval=FALSE}
if (!require("dplyr")) install.packages("dplyr")
if (!require("formatters")) install.packages("formatters")
if (!require("rtables")) install.packages("rtables")
if (!require("rlistings")) install.packages("rlistings")
if (!require("remotes")) install.packages("remotes")
if (!require("tern")) remotes::install_github("insightsengineering/tern@*release")
```

Optionally, you can also install the synthetic CDISC data packages, which contain the datasets used in all `falcon` example tables provided within the `falcon` package and on this site, by running the following:

```{r, echo=TRUE, eval=FALSE}
if (!require("scda")) remotes::install_github("insightsengineering/scda@*release")
if (!require("scda.2022")) remotes::install_github("insightsengineering/scda.2022@*release")
```

For more information on these packages, see the [Additional Resources](#additional-resources) section below.

#### Installing the `falcon` Package

To install the `falcon` package, run the following line of code:

```{r, echo=TRUE, eval=FALSE}
if (!require("falcon")) remotes::install_github("pharmaverse/falcon")
```

### Loading Data

The table functions provided by `falcon` are designed to work with any data which adheres to CDISC standards. If you have access to your own CDISC data, load this into your R environment as usual to use when generating tables.

If not, or to run the examples provided within the package, you can use the `scda` package to load a selection of datasets from the `scda.2022` package which contains example synthetic CDISC data. Datasets can be loaded using the `synthetic_cdisc_dataset()` function from `scda`. Specify the `archive_name` parameter, setting `archive_name = "latest"` for the most recent version or another version if desired (see the list of all available versions by running `ls_synthetic_cdisc_data()`). The `dataset_name` parameter must also be specified with the name of the desired dataset in lowercase, e.g. `dataset_name = "adsl"`. This data is loaded in where necessary as part of the provided examples.

### Template Navigation

A list of all templates available in `falcon` is provided in the [Template Library Index](template_library.qmd), with tables designed based on the [FDA Standard Safety Tables and Figures: Integrated Guide](https://downloads.regulations.gov/FDA-2022-N-1961-0046/attachment_1.pdf).

Each template provided is associated with a function available within the `falcon` package, and contains 4 sections:

-   **Spec. Screenshot**: This tab provides a screenshot of the given table coming from the FDA Standard Safety Table and Figures document.

![](assets/images/getting-started/gs-pan1.png){fig-align="center" width="90%"}

-   **Table**: This tab displays the output table corresponding to the screenshot in the previous tab, generated using the associated `falcon` table function. You can expect a similar output table when using the table function with your own data, depending on pre-processing and the customizations that you apply via the table function parameters.

![](assets/images/getting-started/gs-pan2.png){fig-align="center" width="90%"}

-   **Table Setup**: This tab provides the code used to generate the example table displayed in the previous tab, including the loading of necessary libraries and example datasets, and any pre-processing steps to apply prior to generating the table.

![](assets/images/getting-started/gs-pan3.png){fig-align="center" width="90%"}

-   **Function Details**: This tab includes details of the table-generating function used for this template. Table functions use the naming convention `make_table_XX` where `XX` is the table number taken from the FDA Standard Safety Table and Figures document (preceded by a 0 if the number is one digit). Any required variables for the input datasets are listed and a description of all function arguments is included. This information is also available on each function's help page (i.e. `?make_table_XX`).

![](assets/images/getting-started/gs-pan4.png){fig-align="center" width="90%"}

|           This panel provides a link to the function's source code at the bottom of the page:

![](assets/images/getting-started/gs-pan4b.png){fig-align="center" width="90%"}

### Generating Tables

There are many table-generating functions available within the `falcon` package that can be used to generate FDA standard safety tables using R. These functions each create an `rtables` table object, which can then be further customized, paginated, etc. if required using functions from the [`rtables`](https://insightsengineering.github.io/rtables/main/) package.

#### Using the Table Functions

To use the table functions, you will need to load the `falcon` package and then call the appropriate table function. For example, to create FDA Safety Table 2, you can run the following code:

```{r, echo=TRUE, warning=FALSE, message=FALSE}
library(dplyr)
library(falcon)

# Data pre-processing - ensure all necessary variables are present in the data
adsl <- scda::synthetic_cdisc_dataset("latest", "adsl") %>%
  dplyr::mutate(AGEGR1 = as.factor(dplyr::case_when(
    AGE >= 17 & AGE < 65 ~ ">=17 to <65",
    AGE >= 65 ~ ">=65",
    AGE >= 65 & AGE < 75 ~ ">=65 to <75",
    AGE >= 75 ~ ">=75"
  )) %>% formatters::with_label("Age Group, years")) %>%
  formatters::var_relabel(AGE = "Age, years")

# Create table
tbl <- make_table_02(df = adsl)
tbl
```

The above table is created using the default settings. You can customize tables by specifying function parameter values to set input data, variables to include in the table, table annotations, etc.

#### Table Customization

Each template takes several arguments that can be set to generate a table that meets your requirements. A brief overview of the parameters for each template is provided in the **Function Details** section of each table template page (e.g. for table 2 see [here](https://pharmaverse.github.io/falcon/quarto/table-templates/template-table_02.html#make_table_02)) and the function's help page within R (i.e. `?make_table_XX`), with many of these parameters being standard in multiple table functions.

To customize the output table, you can modify the values of these arguments as per your requirements. For example, table 2 can be customized as follows:

```{r, echo=TRUE, warning=FALSE, message=FALSE}
advs <- scda::synthetic_cdisc_dataset("latest", "advs") %>%
  dplyr::filter(AVISIT == "BASELINE", VSTESTCD == "TEMP") %>%
  dplyr::select("USUBJID", "AVAL")

anl <- dplyr::left_join(adsl, advs, by = "USUBJID") %>% tern::df_explicit_na()

tbl <- make_table_02(
  df = anl,
  vars = c("SEX", "AGE", "RACE", "COUNTRY", "AVAL"),
  lbl_vars = c("Sex", "Age, years", "Race", "Country of Participation", "Baseline Temperature (C)"),
  lbl_overall = "Total\nPopulation",
  na_rm = TRUE,
  annotations = list(
    title = "Table 2. Baseline Demographic and Clinical Characteristics Safety Population, Pooled Analyses",
    main_footer = "Source: [include Applicant source, datasets and/or software tools used].",
    prov_footer = paste(
      "Abbreviations: N, number of patients in treatment arm;",
      "n, number of patients with given characteristic; SD, standard deviation"
    )
  )
)
tbl
```

Note that the `prune_0` argument can be set to specify whether all-zero rows should be included in a table. For example, see that the demographics table below includes rows for `OTHER` and `UNKNOWN` for which all values are zero, whereas these two rows were excluded from the previous tables (`prune_0` defaults to `TRUE` in `make_table_02()`).

```{r, echo=TRUE}
make_table_02(df = anl, vars = "RACE", prune_0 = FALSE)
```

### Feature Requests

If you would like to request the addition of a new feature to a pre-existing function within `falcon`, or would like a specific table template not currently available to be added, please file an issue on GitHub [here](https://pharmaverse.github.io/falcon/) or reach out to the `falcon` team directly via our Slack channel [here](https://app.slack.com/client/T028PB489D3/C04MQS12MND).

You can access the source code for all currently available functions in the `falcon` GitHub repository [here](https://github.com/pharmaverse/falcon/tree/main/R).

### Additional Resources

See the following repositories used within `falcon` for more information:

-   [`dplyr`](https://dplyr.tidyverse.org/): Data manipulation and pre-processing
-   [`rtables`](https://insightsengineering.github.io/rtables/main/): Table creation
-   [`rlistings`](https://insightsengineering.github.io/rlistings/latest-tag/): Listing creation
-   [`tern`](https://insightsengineering.github.io/tern/latest-tag/): Clinical trials analysis functions
-   [`formatters`](https://insightsengineering.github.io/formatters/latest-tag/): Additional rendering formatting
-   [`scda`](https://insightsengineering.github.io/scda/latest-tag/): Example synthetic CDISC data (required for examples only)
