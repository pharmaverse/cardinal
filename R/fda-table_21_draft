library(falcon)
library(rtables)
library(tern)
library(tidyverse)

adsl <- scda::synthetic_cdisc_dataset("rcd_2022_10_13", "adsl") %>%
    select(STUDYID, USUBJID, SEX, AGE, RACE, ETHNIC, SAFFL, ARM, ACTARM) %>%
    filter(SAFFL == "Y") %>%
    mutate(AGEGR1 = as.factor(case_when(
        AGE >= 17 & AGE < 65 ~ ">=17 to <65",
        AGE >= 65 ~ ">=65",
        AGE >= 65 & AGE < 75 ~ ">=65 to <75",
        AGE >= 75 ~ ">=75"
    )) %>% formatters::with_label("Age Group, years")) %>%
    formatters::var_relabel(
    AGE = "Age, years"
    )

adae <- scda::synthetic_cdisc_dataset("rcd_2022_10_13", "adae") %>%
    filter(SAFFL == "Y" & AESER == "Y") %>%
    group_by(STUDYID, USUBJID, AESER) %>%
    distinct(USUBJID) %>%
    ungroup() %>%
    select(STUDYID, USUBJID, AESER)

tbl_join <- left_join(adsl, adae, by = "USUBJID")
tbl_join2 <- tbl_join %>%
    mutate(
        ASER = as.character(AESER),
        ASER = ifelse(is.na(ASER), "N", ASER)
    )


# Denominator N_row: female

df_1 <- tbl_join2 %>%
    mutate(
        sexf = ASER == "Y" & SEX == "F",
        sexm = ASER == "Y" & SEX == "M",
        SEXAE = case_when(
          !is.na(SEX) & ASER == "Y" ~ SEX,
          !is.na(SEX) & ASER == "N" ~ "NOAE"),
          .default = NA_character_
        )

labels <- c(
    "sexf" = "Female",
    "sexm" = "Male"
)

  for (var in vars) {
    new_var <- paste0(var, "AE")
    df <- df %>%
      mutate(
        !!new_var := case_when(
          !is.na(!!rlang::sym(var)) & ASER == "Y" ~ !!rlang::sym(var),
          !is.na(!!rlang::sym(var)) & ASER == "N" ~ "NOAE",
          .default = NA_character_
        )
      )
  }

formatters::var_labels(df_1)[names(labels)] <- labels

lyt_1 <- basic_table() %>%
    split_cols_by("ARM") %>%
    add_colcounts() %>%
    count_patients_with_flags(
        "USUBJID",
        flag_variables = formatters::var_labels(df_1[, c("sexf", "sexm")]),
        .stats = c("fraction"),
        .ungroup_stats = "fraction",
        denom = "n"
    )

res_1 <- build_table(lyt_1, df_1)

res_1



ncol <- 2L
s_count_occurrences(
  df_1,
  denom = c("n"),
  .N_col = ncol,
  .df_row = df_1,
  drop = TRUE,
  .var = "ASER",
  id = "SEX"
)


ids <- factor(df_1[["SEX"]])

  dn <- switch("n",
    n = nlevels(factor(df_1[["SEX"]])),
    N_col = ncol
  )
dn

  occurrences <- {
    occurrence_levels <- sort(unique(df_1[["ASER"]]))
    factor(df_1[["ASER"]], levels = occurrence_levels)
  }
occurrences

has_occurrence_per_id <- table(occurrences, ids) > 0
has_occurrence_per_id

n_ids_per_occurrence <- as.list(rowSums(has_occurrence_per_id))
n_ids_per_occurrence

count = n_ids_per_occurrence


count_fraction = lapply(
      n_ids_per_occurrence,
      function(i, denom) {
        if (i == 0 && denom == 0) {
          c(0, 0)
        } else {
          c(i, i / denom)
        }
      },
      denom = dn
    )

denom <- "n"
count_fraction

fraction = lapply(
    n_ids_per_occurrence,
    function(i, denom) c("num" = i, "denom" = denom),
    denom = dn
)
fraction

s_count_occurrences2 <- function(df,
                                denom = c("N_col", "n"),
                                .N_col, # nolint
                                .df_row,
                                drop = TRUE,
                                .var = "MHDECOD",
                                id = "USUBJID") {
  checkmate::assert_flag(drop)
  assert_df_with_variables(df, list(range = .var, id = id))
  checkmate::assert_count(.N_col)
  checkmate::assert_multi_class(df[[.var]], classes = c("factor", "character"))
  checkmate::assert_multi_class(df[[id]], classes = c("factor", "character"))
  denom <- match.arg(denom)

  occurrences <- if (drop) {
    # Note that we don't try to preserve original level order here since a) that would required
    # more time to look up in large original levels and b) that would fail for character input variable.
    occurrence_levels <- sort(unique(.df_row[[.var]]))
    if (length(occurrence_levels) == 0) {
      stop(
        "no empty `.df_row` input allowed when `drop = TRUE`,",
        " please use `split_fun = drop_split_levels` in the `rtables` `split_rows_by` calls"
      )
    }
    factor(df[[.var]], levels = occurrence_levels)
  } else {
    df[[.var]]
  }
  ids <- factor(df[[id]])
  dn <- switch(denom,
    n = nlevels(ids),
    N_col = .N_col
  )
  has_occurrence_per_id <- table(occurrences, ids) > 0
  n_ids_per_occurrence <- as.list(rowSums(has_occurrence_per_id))
  list(
    count = n_ids_per_occurrence,
    count_fraction = lapply(
      n_ids_per_occurrence,
      function(i, denom) {
        if (i == 0 && denom == 0) {
          c(0, 0)
        } else {
          c(i, i / denom)
        }
      },
      denom = dn
    ),
    fraction = lapply(
      n_ids_per_occurrence,
      function(i, denom) c("num" = i, "denom" = denom),
      denom = dn
    )
  )
}


x <- df_1$SEX
n <- length(x)
n
count <- as.list(table(x))
count
c_frac <- lapply(count,
    function(x) {
        c(x, ifelse(n > 0, x / n, 0))
    }
)
c_frac


length(df_1$SEX)
sum(df_1$SEX == "F")
sum(df_1$SEX == "M")

s_summary_test <- function(x, .N_col) {
  lst_body <- lapply(
    as.list(table(x)),
    function(xi) {
      rcell(xi * c(1, 1 / sum(!is.na(xi))*100), format = "xx (xx.xx%)")
    }
  )
  in_rows(
    .list = c(lst_body)
  )
}

z <- s_summary_test(df_1$SEXAE, .N_col)
z
